package com.cloud.util;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;

  
  
  
public class Base64 {  
    private static final char[] legalChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".toCharArray();  
    public static void main(String args) {
    	
    }
    /** 
     * data[]进行编码 
     * @param data 
     * @return 
     */  
        public static String encode(byte[] data) {  
            int start = 0;  
            int len = data.length;  
            StringBuffer buf = new StringBuffer(data.length * 3 / 2);  
  
            int end = len - 3;  
            int i = start;  
            int n = 0;  
  
            while (i <= end) {  
                int d = ((((int) data[i]) & 0x0ff) << 16)  
                        | ((((int) data[i + 1]) & 0x0ff) << 8)  
                        | (((int) data[i + 2]) & 0x0ff);  
  
                buf.append(legalChars[(d >> 18) & 63]);  
                buf.append(legalChars[(d >> 12) & 63]);  
                buf.append(legalChars[(d >> 6) & 63]);  
                buf.append(legalChars[d & 63]);  
  
                i += 3;  
  
//                if (n++ >= 14) {  
//                    n = 0;  
//                    buf.append(" ");  
//                }  
            }  
  
            if (i == start + len - 2) {  
                int d = ((((int) data[i]) & 0x0ff) << 16)  
                        | ((((int) data[i + 1]) & 255) << 8);  
  
                buf.append(legalChars[(d >> 18) & 63]);  
                buf.append(legalChars[(d >> 12) & 63]);  
                buf.append(legalChars[(d >> 6) & 63]);  
                buf.append("=");  
            } else if (i == start + len - 1) {  
                int d = (((int) data[i]) & 0x0ff) << 16;  
  
                buf.append(legalChars[(d >> 18) & 63]);  
                buf.append(legalChars[(d >> 12) & 63]);  
                buf.append("==");  
            }  
  
            return buf.toString();  
        }  
  
        private static int decode(char c) throws Exception {  
            if (c >= 'A' && c <= 'Z')  
                return ((int) c) - 65;  
            else if (c >= 'a' && c <= 'z')  
                return ((int) c) - 97 + 26;  
            else if (c >= '0' && c <= '9')  
                return ((int) c) - 48 + 26 + 26;  
            else  
                switch (c) {  
                case '+':  
                    return 62;  
                case '/':  
                    return 63;  
                case '=':  
                    return 0;  
                default:  
                	throw new Exception("ResultCode.DECODEBARWRONG"); 
                }  
        }  
  
        /** 
         * Decodes the given Base64 encoded String to a new byte array. The byte 
         * array holding the decoded data is returned. 
         * @throws Exception 
         */  
  
        public static byte[] decode(String s) throws Exception {  
            ByteArrayOutputStream bos = new ByteArrayOutputStream();  
            byte[] decodedBytes = null;
            try {  
//                decode(s, bos);  
            	if(null!=s&&!"".equals(s)&&s.length()>0){
	            	 int i = 0;  
	                 int len = s.length(); 
	     	            while (true) {  
	     	                while (i < len && s.charAt(i) <= ' ')  
	     	                    i++;  
	     	                if (i == len)  
	     	                    break;  
	     	                int tri = (decode(s.charAt(i)) << 18)  
	     	                        + (decode(s.charAt(i + 1)) << 12)  
	     	                        + (decode(s.charAt(i + 2)) << 6)  
	     	                        + (decode(s.charAt(i + 3)));  
	     	                bos.write((tri >> 16) & 255);
	     	                if (s.charAt(i + 2) == '=')  
	     	                    break;  
	     	               bos.write((tri >> 8) & 255);  
	     	                if (s.charAt(i + 3) == '=')  
	     	                    break;  
	     	               bos.write(tri & 255);  
	     	                i += 4;  
	     	            }  
	            	decodedBytes = bos.toByteArray();  
            	}
            } catch (NullPointerException e) {  
            	e.printStackTrace();
                throw new Exception("ResultCode.DECODEBARWRONG"); 
            } catch (IOException e) {  
                throw new Exception("ResultCode.DECODEBARWRONG"); 
            }finally{
            	if(null!=bos){
            		 bos.close(); 
            	}
            }  
            return decodedBytes;  
        }  
  
        private static void decode(String s, OutputStream os) throws Exception {  
            int i = 0;  
            int len = s.length();  
            try {
	            while (true) {  
	                while (i < len && s.charAt(i) <= ' ')  
	                    i++;  
	                if (i == len)  
	                    break;  
	                int tri = (decode(s.charAt(i)) << 18)  
	                        + (decode(s.charAt(i + 1)) << 12)  
	                        + (decode(s.charAt(i + 2)) << 6)  
	                        + (decode(s.charAt(i + 3)));  
	                
						os.write((tri >> 16) & 255);
				
	                if (s.charAt(i + 2) == '=')  
	                    break;  
	                os.write((tri >> 8) & 255);  
	                if (s.charAt(i + 3) == '=')  
	                    break;  
	                os.write(tri & 255);  
	                i += 4;  
	            }  
            } catch (IOException e) {
				// TODO Auto-generated catch block
                throw new Exception("ResultCode.DECODEBARWRONG"); 
			}  
        }
		public static void main(String args[]){
			String info = "";
			try {
				byte[] c=Base64.decode(info);
				System.out.println(new String(c));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
}  
